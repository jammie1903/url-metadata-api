@using React.AspNet
@model object

@{
  ViewBag.Title = "Url Metadata Api";
  ViewBag.Description = "The API for All Your Url Metadata Needs";
  Layout = "_Layout";
}

<div class="hero-banner">
  <div class="section max-width">
    <i class="site-icon icon hero-banner-image"></i>
    <div class="text">
      <h2>
        <i class="site-icon icon hero-banner-image"></i>
        <span>@ViewBag.Description</span>
      </h2>
      <p>
        Ever needed to display some information about a url but didn't know how to get hold of it? This API is your answer.
        <br />
        This api scans a given url to find the metadata stored in the pages header, and returns it to you as JSON.
      </p>
    </div>
  </div>
</div>

<div class="section max-width">
  @Html.React("TestUrlForm", new { })
  
  <h3>Want to try it yourself?</h3>
    
  The url is <pre>@(Context.Request.Scheme + "://" + Context.Request.Host)/api/metadata?url={put the url here!}</pre>

  <h4>Parameters</h4>
  
  <p>
    <strong>url (mandatory):</strong> The url you wish to lookup
  </p>
  <p>
    <strong>priority:</strong> Which type of metadata should be treated as priority, either 
    <a target="_blank" rel="noopener" href="http://ogp.me/">OpenGraph</a> (the default), 
    <a target="_blank" rel="noopener" href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started.html">Twitter</a>, or generic.
  </p>
  <p>
    <strong>all:</strong> Set this to <code>true</code> if you wish to retrieve all types of metadata for those that can be provided in multiple formats. eg. titles, descriptions and images.
  </p>
</div>
